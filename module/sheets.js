module.exports = async (client) => {
  const { GoogleSpreadsheet } = require('google-spreadsheet');
  const { JWT } = require('google-auth-library');

  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n"),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  client.sheets = {};

  // ---------- CONFIGURATION ------------ //

  client.sheets.config = {}; // sheet for main bot configs including characters
  client.sheets.config.src = new GoogleSpreadsheet(process.env.SHEET_CONFIG, serviceAccountAuth);

  client.sheets.config.refresh = async function () {
    await client.sheets.config.src.loadInfo()
    client.sheets.config.main = (await client.sheets.config.src.sheetsById[0].getRows())[0]
    console.log(`[REFRESH] Config`)
  }

  client.config = function (data) {
    return client.sheets.config.main.get(data)
  }

  await client.sheets.config.refresh();

  // ----------- DATABASE ------------ //

  client.db = {};

  async function setup(sheetId) {
    let res = {
      sheet: client.sheets.config.src.sheetsById[sheetId],
      async reload() {
        this.data = await this.sheet?.getRows() ?? this.data()
      },
      data: [],
      find(...args) {
        return this.data.find(...args)
      },
      filter(...args) {
        return this.data.filter(...args)
      },
      map(...args) {
        return this.data.map(...args)
      },
      toObjects() { return this.data.map(x => x.toObject()) }
    }
    await res.reload();

    return res
  }

  for (let sheet of ["users", "charas", "factions", "turf", "items", "tasks", "work", "crime", "reactroles"]) {
    client.db[sheet] = await setup(client.config(`${sheet}_sheet`))
  }

  for (let row of client.db.reactroles.filter(row => row.get("message_id"))) {
    await (await client.channels.fetch(row.get("message_channel"))).messages.fetch(row.get("message_id"))
  }

  client.log = async function (description, sender) {
    try {
      const log = await client.channels.fetch(client.config("log_channel"));
      log.send({
        embeds: [{
          description: description + (sender ? (`\n\n-# Executed by <@${sender}>`) : ""),
          timestamp: new Date().toISOString()
        }]
      })
    } catch (error) {
      console.log("Logging error:\n" + error.message)
    }
  }

  // --------- CUSTOM COMMANDS --------- //

  client.sheets.commands = {}; // sheet for custom commands
  client.sheets.commands.src = new GoogleSpreadsheet(process.env.SHEET_COMMANDS, serviceAccountAuth);

  client.sheets.commands.refresh = async function () {
    await client.sheets.commands.src.loadInfo()
    client.sheets.commands.main = await client.sheets.commands.src.sheetsById[0].getRows()
    console.log(`[REFRESH] Commands`)
  }

  await client.sheets.commands.refresh();

  client.db.actions = await (async () => {
    let res = {
      sheet: client.sheets.commands.src.sheetsById[0],
      async reload() {
        this.data = await this.sheet.getRows() ?? this.data()
      },
      data: [],
      find(...args) {
        return this.data.find(...args)
      },
      filter(...args) {
        return this.data.filter(...args)
      },
      map(...args) {
        return this.data.map(...args)
      },
      async get(id) {
        try {
          await client.sheets.commands.src.loadInfo()
          return await client.sheets.commands.src.sheetsById[id].getRows()
        } catch (error) {
          console.log(error)
          return null
        }
      }
    }
    await res.reload();

    return res
  })()
}